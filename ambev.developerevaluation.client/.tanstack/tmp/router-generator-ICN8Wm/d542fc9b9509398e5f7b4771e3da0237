/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/_auth/layout'
import { Route as AuthenticatedIndexRouteImport } from './pages/_authenticated/index'
import { Route as AuthSignUpRouteImport } from './pages/_auth/sign-up'
import { Route as AuthSignInRouteImport } from './pages/_auth/sign-in'
import { Route as AuthForgotPasswordRouteImport } from './pages/_auth/forgot-password'
import { Route as AuthenticatedUsersIndexRouteImport } from './pages/_authenticated/users/index'
import { Route as AuthenticatedProductsIndexRouteImport } from './pages/_authenticated/products/index'
import { Route as AuthenticatedUsersUserIdIndexRouteImport } from './pages/_authenticated/users/$userId/index'
import { Route as AuthenticatedProductsProductIdIndexRouteImport } from './pages/_authenticated/products/$productId/index'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/_authenticated/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexRouteImport.update({
  id: '/_authenticated/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedProductsIndexRoute =
  AuthenticatedProductsIndexRouteImport.update({
    id: '/_authenticated/products/',
    path: '/products/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedUsersUserIdIndexRoute =
  AuthenticatedUsersUserIdIndexRouteImport.update({
    id: '/_authenticated/users/$userId/',
    path: '/users/$userId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedProductsProductIdIndexRoute =
  AuthenticatedProductsProductIdIndexRouteImport.update({
    id: '/_authenticated/products/$productId/',
    path: '/products/$productId/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/': typeof AuthenticatedIndexRoute
  '/products': typeof AuthenticatedProductsIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/products/$productId': typeof AuthenticatedProductsProductIdIndexRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdIndexRoute
}
export interface FileRoutesByTo {
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/': typeof AuthenticatedIndexRoute
  '/products': typeof AuthenticatedProductsIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/products/$productId': typeof AuthenticatedProductsProductIdIndexRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthLayoutRouteWithChildren
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/products/': typeof AuthenticatedProductsIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
  '/_authenticated/products/$productId/': typeof AuthenticatedProductsProductIdIndexRoute
  '/_authenticated/users/$userId/': typeof AuthenticatedUsersUserIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/'
    | '/products'
    | '/users'
    | '/products/$productId'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/'
    | '/products'
    | '/users'
    | '/products/$productId'
    | '/users/$userId'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/forgot-password'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_authenticated/'
    | '/_authenticated/products/'
    | '/_authenticated/users/'
    | '/_authenticated/products/$productId/'
    | '/_authenticated/users/$userId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedProductsIndexRoute: typeof AuthenticatedProductsIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
  AuthenticatedProductsProductIdIndexRoute: typeof AuthenticatedProductsProductIdIndexRoute
  AuthenticatedUsersUserIdIndexRoute: typeof AuthenticatedUsersUserIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/products/': {
      id: '/_authenticated/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AuthenticatedProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/users/$userId/': {
      id: '/_authenticated/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthenticatedUsersUserIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/products/$productId/': {
      id: '/_authenticated/products/$productId/'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof AuthenticatedProductsProductIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthLayoutRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedProductsIndexRoute: AuthenticatedProductsIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
  AuthenticatedProductsProductIdIndexRoute:
    AuthenticatedProductsProductIdIndexRoute,
  AuthenticatedUsersUserIdIndexRoute: AuthenticatedUsersUserIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
